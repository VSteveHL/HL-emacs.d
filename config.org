# -*- coding: utf-8 -*-
#+STARTUP: overview
#+PROPERTY: header-args :mkdirp yes
  
* COMMENT early-init.el
  #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
    (push '(menu-bar-lines . 0) default-frame-alist)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)
  #+end_src
* init.el
  
  #+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/"))
    (setq default-directory "~/")

    (prefer-coding-system 'utf-8)

    (defun open-init-file ()
      (interactive)
      (find-file "~/HL-emacs.d/config.org"))

    (global-set-key (kbd "<f2>") 'open-init-file)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    ;;(fido-mode t)

    (setq auto-save-default nil)

    (require 'init-elpa)

    (require 'init-completion)
    (require 'init-edit)
    ;; (require 'init-lsp)
    (require 'init-markdown)
    (require 'init-org)
    (require 'init-ui)
    (require 'init-utils)

  #+end_src
  
* init-completion
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-completion.el
    (use-package company
      :diminish
      :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
      :hook (after-init . global-company-mode))

    (use-package counsel
      :diminish ivy-mode counsel-mode
      :bind (("C-s" . swiper-isearch)
	     ("C-r" . swiper-isearch-backward))
      :hook ((after-init . ivy-mode)
	     (ivy-mode . counsel-mode))
      :init
      (setq ivy-count-format "%d/%d "
	    ivy-use-virtual-buffers t
	    ivy-initial-inputs-alist nil))

    (provide 'init-completion)

  #+end_src

* init-edit
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-edit.el
    (use-package imenu
		 :bind (("C-." . imenu)))

    (use-package undo-tree
		 :diminish
		 :hook (after-init . global-undo-tree-mode)
		 :init
		 (setq undo-tree-visualizer-timestamps t
		       undo-tree-enable-undo-in-region nil
		       undo-tree-auto-save-history nil))

    (use-package evil)
    ;;      :hook (after-init . evil-mode))


    (provide 'init-edit)
  #+end_src
* init-elpa
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-elpa.el
    (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
			     ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

    (require 'package)
    (package-initialize)

    (unless (bound-and-true-p package--initialized)
      (package-initialize))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-and-compile
      (setq use-package-always-ensure t
	    use-package-always-defer t
	    use-package-expand-minimally t)
      (require 'use-package))

    (use-package diminish)
    (use-package delight)


    (provide 'init-elpa)
  #+end_src
  
* COMMENT init-lsp
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-lsp.el
    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
             (cc-mode . lsp))
      :commands lsp)
    (provide 'init-lsp)
  #+end_src
* init-markdown
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-markdown.el
    (use-package markdown-mode
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)))

    (use-package auctex)

    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (setq TeX-engine 'xetex)))

    (provide 'init-markdown)
  #+end_src
  
* init-org

  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el

    (require 'org-tempo)
    (setq org-export-backends '(latex md html ascii))
    (setq system-time-locale "C")
    ;; (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    ;; (global-set-key (kbd "C-c c") #'org-capture)


    (require 'epa-file)
    (epa-file-enable)
    (setq epa-file-encrypt-to nil
          epa-file-cache-passphrase-for-symmetric-encryption t)

    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance '("crypt"))
    (setq org-crypt-key nil)

    (provide 'init-org)
  #+end_src

* init-ui
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-ui.el
    (setq ring-bell-function 'ignore)
    (tool-bar-mode 0)
    (global-linum-mode 1)
    (scroll-bar-mode -1)
    (setq cursor-type 'bar)

    (setq inhibit-splash-screen 1)

    (fset 'yes-or-no-p 'y-or-n-p)

    (setq initial-scratch-message ";; Never gonna give you up ~\n\n")

    (add-to-list 'default-frame-alist '(font . "JetBrains Mono-14"))
    (add-to-list 'default-frame-alist '(width . 85))
    (add-to-list 'default-frame-alist '(height . 28))

    (setq-default c-basic-offset   4
          tab-width        4
          indent-tabs-mode nil)

    (provide 'init-ui)

  #+end_src

* init-utils
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el

    (use-package which-key
      :hook (after-init . which-key-mode))

    (use-package magit
      :bind (("C-x g" . magit-status)))

    (provide 'init-utils) 
  #+end_src
  
* runemacs.bat
  #+begin_src
set HOME=C:\Users\<username>
"C:\portable\emacs-27.2-x86_64\bin\runemacs.exe"
  #+end_src


