# -*- coding: utf-8 -*-
#+STARTUP: overview
#+PROPERTY: header-args :mkdirp yes
  
* COMMENT early-init.el
  #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
    (push '(menu-bar-lines . 0) default-frame-alist)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)
  #+end_src
* init.el
    #+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
      (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/"))

      (require 'init-startup)
      (require 'init-elpa)
      (require 'init-org)
      (require 'init-utils)
      (require 'init-tools)
      (require 'init-program)
      (require 'init-ui)
  #+end_src

* init-startup
** coding-system
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-startup.el
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment 'utf-8)
#+end_src
** user-name
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-startup.el
  (setq user-full-name "VSteveHL")
  (setq user-mail-address "vstevehl@163.com")
#+end_src
** const
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-startup.el
  (defconst *is-windows* (or (eq system-type 'windows-nt) (eq system-type 'ms-dos)))
  (defconst *is-linux* (eq system-type 'gnu/linux))

  (defun open-init-file ()
    "just open my init file"
    (interactive)
    (find-file "~/HL-emacs.d/config.org"))

  (global-set-key (kbd "<f2>") 'open-init-file)
#+end_src

** provide
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-startup.el
  (provide 'init-startup)
#+end_src

* init-elpa
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-elpa.el
    (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                             ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

    ;; (setq package-archives '(("myelpa" . "~/myelpa/")))

    (require 'package)
    ;; (package-initialize)

    (unless (bound-and-true-p package--initialized)
      (package-initialize))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-and-compile
      (setq use-package-always-ensure t
            use-package-always-defer t
            use-package-expand-minimally t)
      (require 'use-package))

    (use-package diminish)
    (use-package delight)

    (provide 'init-elpa)
  #+end_src
  
* init-org
** org basic setup
里面修改了markdown代码块导出的函数是从 [[https://stackoverflow.com/questions/15717103/preferred-method-of-overriding-an-emacs-lisp-function][这里]] 和 [[https://emacs.stackexchange.com/questions/42471/how-to-export-markdown-from-org-mode-with-syntax][这里]] 抄的，做了一点小修改。
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
    ;; org variable
    (setq org-startup-truncated nil)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    ;; (setq org-agenda-include-diary t)
    (setq system-time-locale "C")
    (setq org-startup-indented t)
    (setq org-image-actual-width nil)
    (setq calendar-date-style 'iso)
    (setq diary-show-holidays-flag nil)

    (setq org-todo-keyword-faces '(("CANCELED" . "gray")))

    ;; key bind
    ;; (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)
    (global-set-key (kbd "C-,") #'org-cycle-agenda-files)
  #+end_src
** org export
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
  ;; org export
  (require 'org-tempo)
  (setq org-export-backends '(latex md html ascii org))

  (defun org-mymd-example-block (example-block _content info)
    "Transcode element EXAMPLE-BLOCK as ```lang ...'''."
    (format "```%s\n%s```"
            (org-element-property :language example-block)
            (org-remove-indentation
             (org-export-format-code-default example-block info))))

  (advice-add 'org-md-example-block :override #'org-mymd-example-block)
#+end_src
** org agenda
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
    ;; org agenda
    (setq org-agenda-files '("~/GTD/task.org"
                             "~/GTD/schedule.org"
                             "~/GTD/habit.org"))

    ;; org-habit
    (require 'org-habit)
    (setq org-habit-preceding-days 10
          org-habit-following-days 4)
  #+end_src
  
** org capture
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
    ;; org capture
    (setq org-default-notes-file "~/GTD/inbox.org")
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/gtd/task.org" "Tasks")
             "* TODO %?\n%i\n%a")
            ("i" "inbox" entry (file+headline "~/gtd/task.org" "inbox")
             "* %?")))
  #+end_src
  
** org-roam
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "~/roam/"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol))
  #+end_src
  
** COMMENT org-crypt
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
    ;; epa
    (require 'epa-file)
    (epa-file-enable)
    (setq epa-file-encrypt-to nil
          epa-file-cache-passphrase-for-symmetric-encryption t)

    ;; org-crypt
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq auto-save-default nil)
    (setq org-tags-exclude-from-inheritance '("crypt"))
    (setq org-crypt-key nil)
  #+end_src
  
** provide
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el
    (provide 'init-org)
  #+end_src
* init-utils
** company
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package company
    :diminish
    :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
    :hook (after-init . global-company-mode)
    :bind (("C-M-i" . company-complete)
           ("C-c i c" . company-complete)
           ("C-c i f" . company-files)))
#+end_src

** counsel
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package counsel
    :diminish ivy-mode counsel-mode
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-isearch-backward)
           ("M-s g" . counsel-rg))
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :init
    (setq ivy-count-format "%d/%d "
          ivy-use-virtual-buffers t
          ivy-initial-inputs-alist nil))
#+end_src

** undo-tree
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package undo-tree
    :diminish
    :hook (after-init . global-undo-tree-mode)
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-enable-undo-in-region nil
          undo-tree-auto-save-history nil))
#+end_src

** which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package which-key
    :diminish
    :hook (after-init . which-key-mode))
#+end_src

** hungry-delete
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package hungry-delete
    :bind
    (("C-c d" . hungry-delete-forward)
     ("C-c DEL" . hungry-delete-backward)))
#+end_src

** paredit
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package paredit
     :diminish
     :hook ((lisp-mode racket-mode emacs-lisp-mode) . enable-paredit-mode))
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** elpa-mirror
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package elpa-mirror)
#+end_src

** provide
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (provide 'init-utils)
#+end_src
* init-tools
** magit
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-tools.el
  (use-package magit
    :bind (("C-x g" . magit-status)))
#+end_src

** projectile
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-tools.el
    (use-package projectile
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
                  ("C-c p" . projectile-command-map)))
  #+end_src
** yasnippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-tools.el
  (use-package yasnippet
    :bind
    (("C-c y n" . yas-new-snippet)
     ("C-c y s" . yas-insert-snippet)
     ("C-c y v" . yas-visit-snippet-file))
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1))

#+end_src
** COMMENT rg
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-utils.el
  (use-package rg)
#+end_src
  
** provide
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-tools.el
  (provide 'init-tools)
#+end_src

* init-program
** markdown
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-program.el
    (use-package markdown-mode
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)))

    ;; (use-package toc-org
    ;;   :hook ((org-mode markdown-mode) . toc-org-mode))
  #+end_src
** TeX
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-program.el
  (use-package auctex)

  (use-package cdlatex)

  (setq-default TeX-engine 'xetex)
#+end_src

** cc-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-program.el
  (setq c-default-style "bsd"
        c-basic-offset 4)
#+end_src

** COMMENT Lisp
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-program.el
  (use-package slime
    :init
    (setq inferior-lisp-program "sbcl")
    :config
    (slime-setup '(slime-fancy slime-quicklisp slime-asdf)))

  ;; (use-package racket-mode
  ;;   :hook (racket-mode . racket-xp-mode))
#+end_src

** COMMENT python
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-program.el
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt")

  (use-package elpy
    :init
    (elpy-enable))

  (add-hook 'elpy-mode-hook (lambda ()
                            (add-hook 'before-save-hook
                                      'elpy-yapf-fix-code nil t)))
#+end_src
** provide
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-program.el
  (provide 'init-program)
#+end_src
* init-ui
** UI
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-ui.el
  (setq default-directory "~/")
  (setq delete-by-moving-to-trash t)
  (setq ring-bell-function 'ignore)
  (setq inhibit-splash-screen 1)
  ;; (setq make-backup-files nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; (fset 'yes-or-no-p 'y-or-n-p)
  (define-key y-or-n-p-map [return] 'act)
  (setq use-short-answers t)
#+end_src
** TUI
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-ui.el
  (setq inhibit-splash-screen 1)
  (setq initial-scratch-message ";; Never gonna give you up ~\n\n")
  (setq show-paren-delay 0)
  (show-paren-mode 1)
  (global-display-line-numbers-mode)
  (winner-mode 1)

  (setq-default tab-width 4
                indent-tabs-mode nil)
#+end_src
** GUI
真的不知道该怎么设置……  为了让 daemon 模式下字体设置也生效，就简单粗暴地直接设定 default-frame-alist 了。由于 Linux 目前上用的是 emacs-nox，所以只让这个设定在 windows 上生效。
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-ui.el
  (use-package emacs
    :if *is-windows*
    :config
    (setq-default cursor-type 'bar)
    (scroll-bar-mode -1)
    (tool-bar-mode 0)
    (set-fontset-font "fontset-default" 'han "霞鹜文楷")
    (setq default-frame-alist '((width . 90)
                                (height . 28)
                                (font . "JetBrains Mono-16"))))
  (use-package emacs
    :if *is-linux*
    :config
    (menu-bar-mode -1))
#+end_src
** provide
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-ui.el
  (provide 'init-ui)
#+end_src

* runemacs.bat
最开始的方案是在bat文件里指定HOME目录
  #+begin_src
set HOME=C:\Users\<username>
"C:\portable\emacs-27.2-x86_64\bin\runemacs.exe"
  #+end_src

后来切换到守护进程(daemon)方式来运行emacs，于是设置了HOME变量并整了个ahk脚本
(此时也切换到了gccemacs，windows版本在这里下载 https://github.com/kiennq/emacs-build)
#+begin_src
#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; #Warn  ; Enable warnings to assist with detecting common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

run C:\portable\emacs-master-x86_64-full\bin\runemacs.exe --daemon, ,Hide
#+end_src

在守护进程运行之后，将emacsclientw.exe右键发送到桌面快捷方式，之后在 属性-目标 中加上 -c 即可

* COMMENT yasnippet

#+begin_src text :tangle ~/.emacs.d/snippets/org-mode/init-tangle
  # -*- mode: snippet -*-
  # name: init-tangle
  # key: init
  # --

    ,#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/$1
    $0
    ,#+end_src
  #+end_src

