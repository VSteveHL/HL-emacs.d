#+PROPERTY: header-args :mkdirp yes

* init.el
  
  #+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/"))

    (setq ring-bell-function 'ignore)
    (tool-bar-mode 0)
    (global-linum-mode 1)
    (setq cursor-type 'bar)
    (setq inhibit-splash-screen 1)

    (setq initial-scratch-message ";; Never gonna give you up ~\n\n")

    (add-to-list 'default-frame-alist '(font . "JetBrains Mono-14"))
    (add-to-list 'default-frame-alist '(width . 85))
    (add-to-list 'default-frame-alist '(height . 28))

    (defun open-init-file ()
      (interactive)
      (find-file "~/.emacs.d/init.el"))

    (global-set-key (kbd "<f2>") 'open-init-file)

    ;;(fido-mode t)

    (require 'init-org)
    (require 'init-elpa)
    (require 'init-completion)

  #+end_src
  
* init-org

  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-org.el

    (require 'org-tempo)

    (provide 'init-org)
  #+end_src

* init-elpa
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-elpa.el
    (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
			     ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

    (require 'package)
    (package-initialize)

    (unless (bound-and-true-p package--initialized)
      (package-initialize))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-and-compile
      (setq use-package-always-ensure t
	    use-package-always-defer t
	    use-package-expand-minimally t)
      (require 'use-package))

    (use-package diminish)
    (use-package delight)


    (provide 'init-elpa)


  #+end_src

  
* init-completion
  #+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/init-completion.el
    (use-package company
      :diminish
      :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
      :hook (after-init . global-company-mode))

    (use-package counsel
      :diminish ivy-mode counsel-mode
      :bind (("C-s" . swiper-isearch)
	     ("C-r" . swiper-isearch-backward)
	     )
      :hook ((after-init . ivy-mode)
	     (ivy-mode . counsel-mode))
      :init
      (setq ivy-count-format "%d/%d "
	    ivy-use-virtual-buffers t
	   ))

    (provide 'init-completion)

  #+end_src
