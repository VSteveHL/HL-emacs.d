# -*- coding: utf-8 -*-
#+STARTUP: overview
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :mkdirp yes
  
* init-startup
** lexical-binding
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src
** coding-system
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment 'utf-8)
#+end_src

** COMMENT user-name
#+begin_src emacs-lisp
  (setq user-full-name "VSteveHL")
  (setq user-mail-address "vstevehl@163.com")
#+end_src

** const
#+begin_src emacs-lisp
  (defconst *is-windows* (or (eq system-type 'windows-nt) (eq system-type 'ms-dos)))
  (defconst *is-linux* (eq system-type 'gnu/linux))

  (defun open-init-file ()
    "just open my init file"
    (interactive)
    (find-file "~/HL-emacs.d/config.org"))

  (global-set-key (kbd "<f2>") 'open-init-file)
#+end_src
** custom file
#+begin_src emacs-lisp
  (setq *custom-file* "~/.emacs.d/custom.el")
  (if (file-exists-p *custom-file*) (load *custom-file*))
#+end_src

* init-elpa
参考 [[https://github.com/seagle0128/.emacs.d][centaur Emacs]]
  #+begin_src emacs-lisp
    (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                             ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

    ;; emacs-china 的源，备用
    ;;(setq package-archives '(("gnu"   . "http://1.15.88.122/gnu/")
    ;;                           ("melpa" . "http://1.15.88.122/melpa/")))

    ;; mysy2 版本的 gpg 路径出问题了，先把这个关了
    ;;(setq package-check-signature nil)

    ;; (setq package-archives '(("myelpa" . "~/myelpa/")))

    (require 'package)
    ;; (package-initialize)

    ;; 下面这一段是从 Centaur Emacs 抄的，用于初始化 use-package
    (unless (bound-and-true-p package--initialized)
      (package-initialize))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-and-compile
      (setq use-package-always-ensure t
            use-package-always-defer t
            use-package-expand-minimally t)
      (require 'use-package))

    (use-package diminish)
    (use-package delight)

  #+end_src
  
* init-org
** org basic setup
org-link参数的修改看 [[https://www.reddit.com/r/emacs/comments/oggf1d/whats_the_difference_between_org_mode_link_types/][这里]]
  #+begin_src emacs-lisp
    (require 'org)
    (require 'org-id) ;; 为了下面的 org-id-link-to-org-use-id

    ;; org variable
    (setq org-startup-truncated nil) ;; 开启自动换行
    (setq org-log-done 'time) ;; TODO 变为 DONE时自动添加时间戳
    (setq org-log-into-drawer t) ;; log 默认收进抽屉
    ;; (setq org-agenda-include-diary t) ;; agenda 包含 emacs diray文件
    (setq system-time-locale "C") ;; 调整 org 时间戳的格式
    (setq org-startup-indented t) ;; 多级标题自动缩进
    (setq org-image-actual-width nil)  ;; TODO 调整 org 图片显示
    (setq calendar-date-style 'iso) ;; TODO 调整日历默认格式
    (setq diary-show-holidays-flag nil) ;; 禁止 diary 显示节日
    (setq org-startup-folded 'content) ;; 打开 org 文件时默认的显示等级
    (setq org-clock-mode-line-total 'current) ;; org clock 在 modeline 上的显示
    (setq org-id-link-to-org-use-id t) ;; org 生成链接默认用 uuid
    (setq org-archive-default-command #'org-toggle-archive-tag) ;; 归档默认原地归档
     ;; 调整嵌入的 latex 图片的大小
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

    ;; 删除俩不用的 link 种类，防止 ivy 读到
    (setq org-link-parameters (delq (assoc "file+sys" org-link-parameters) org-link-parameters))
    (setq org-link-parameters (delq (assoc "file+emacs" org-link-parameters) org-link-parameters))

    ;; (setq org-todo-keyword-faces '(("CANCELED" . "gray")))

    ;; (setq org-clock-persist 'history)
    ;; (org-clock-persistence-insinuate)

    ;; txt 文件打开默认使用 orgmode
    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))


    ;; key bind
    (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)
    (global-set-key (kbd "C-,") #'org-cycle-agenda-files)
    (define-key org-mode-map (kbd "C-c C-o") #'org-open-at-point-global)
  #+end_src
** org export
里面修改了markdown代码块导出的函数是从 [[https://stackoverflow.com/questions/15717103/preferred-method-of-overriding-an-emacs-lisp-function][这里]] 和 [[https://emacs.stackexchange.com/questions/42471/how-to-export-markdown-from-org-mode-with-syntax][这里]] 抄的，做了一点小修改。
#+begin_src emacs-lisp
  ;; org export 要用的后端
  (setq org-export-backends '(latex md html ascii org))

  ;; 开启模版功能，自己添加了一个text种类的src，主要是为了方便tangle
  (require 'org-tempo)
  (push '("t" . "src text") org-structure-template-alist)

  (defun org-mymd-example-block (example-block _content info)
    "Transcode element EXAMPLE-BLOCK as ```lang ...'''."
    (format "```%s\n%s```"
            (org-element-property :language example-block)
            (org-remove-indentation
             (org-export-format-code-default example-block info))))

  (advice-add 'org-md-example-block :override #'org-mymd-example-block)
#+end_src
** org agenda
  #+begin_src emacs-lisp
    ;; agenda file
    (setq org-agenda-files '("~/GTD/bookmarks.org"))

    ;; org-habit
    (require 'org-habit)
    (setq org-habit-preceding-days 10
          org-habit-following-days 4)
  #+end_src
  
** org capture
  #+begin_src emacs-lisp
    ;; org capture
    (setq org-default-notes-file "~/GTD/inbox.org")
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/gtd/task.org" "Tasks")
             "* TODO %?\n%i\n%a")
            ("i" "inbox" entry (file+headline "~/gtd/task.org" "inbox")
             "* %?")))
  #+end_src
  
** org-roam
直接从readme里抄的。[[https://github.com/org-roam/org-roam#configuration][链接]]
  #+begin_src emacs-lisp
    (use-package org-roam
      :if *is-windows*
      :ensure t
      :init
      (setq org-roam-directory (file-truename "~/roam-note/"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol))
  #+end_src
  
** TODO COMMENT org-crypt
  #+begin_src emacs-lisp
    ;; epa
    (require 'epa-file)
    (epa-file-enable)
    (setq epa-file-encrypt-to nil
          epa-file-cache-passphrase-for-symmetric-encryption t)

    ;; org-crypt
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq auto-save-default nil)
    (setq org-tags-exclude-from-inheritance '("crypt"))
    (setq org-crypt-key nil)
  #+end_src
  
** COMMENT provide
  #+begin_src emacs-lisp
    (provide 'init-org)
  #+end_src
* init-utils
** company
#+begin_src emacs-lisp
    (use-package company
      :diminish
      :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
      :hook (after-init . global-company-mode)
      :bind (;("C-M-i" . company-complete)
             ("C-c i c" . company-complete)
             ("C-c i f" . company-files)
             ("C-c i y" . company-yasnippet)))

#+end_src

** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :diminish ivy-mode counsel-mode
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-isearch-backward)
           ("M-s g" . counsel-rg)
           ("M-s i" . counsel-company))
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :init
    (setq ivy-count-format "%d/%d "
          ivy-use-virtual-buffers t
          ivy-initial-inputs-alist nil))
#+end_src

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish
    :hook (after-init . global-undo-tree-mode)
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-enable-undo-in-region nil
          undo-tree-auto-save-history nil))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :hook (after-init . which-key-mode))
#+end_src

** hungry-delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :bind
    (("C-c d" . hungry-delete-forward)
     ("C-c DEL" . hungry-delete-backward)))
#+end_src

** paredit
#+begin_src emacs-lisp
  (use-package paredit
    :diminish
    :hook ((lisp-mode racket-mode emacs-lisp-mode sly-mrepl-mode slime-repl-mode racket-repl-mode) . enable-paredit-mode))
#+end_src

** COMMENT smartparens
不知道为啥把 hook 去了 启动的时候按键绑定就不生效了。暂时先不研究了。
#+begin_src emacs-lisp
  (use-package smartparens
    :hook ((lisp-mode racket-mode emacs-lisp-mode) . sp-use-smartparens-bindings)
    :init
    (smartparens-global-mode)
    :config
    (require 'smartparens-config)
    (setq sp-base-key-bindings 'sp)
  )
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** elpa-mirror
#+begin_src emacs-lisp
  (use-package elpa-mirror)
#+end_src

** keyfreq
#+begin_src emacs-lisp
  (use-package keyfreq
    :hook ((after-init . keyfreq-mode))
    :config
    (keyfreq-autosave-mode 1))
#+end_src

** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

** avy
#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-:" . avy-goto-char)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0)
           ("C-'" . avy-goto-char-2)
           :map org-mode-map
           ("C-'" . avy-goto-char-2)))
#+end_src

** iedit
#+begin_src emacs-lisp
  (use-package iedit
    :bind ("C-;" . iedit-mode))
#+end_src

** COMMENT dashboard
配置从 [[https://www.reddit.com/r/emacs/comments/8i2ip7/emacs_dashboard_emacsclient/][这里]] 抄的
#+begin_src emacs-lisp
  (use-package dashboard
    :defer nil
    :config
    (dashboard-setup-startup-hook))
#+end_src
** COMMENT provide
#+begin_src emacs-lisp
  (provide 'init-utils)
#+end_src
* init-tools
** git
#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))

  (use-package git-modes)
#+end_src

** projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
                  ("C-c p" . projectile-command-map)))
  #+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer nil
    ;; :bind
    ;; (("C-c y n" . yas-new-snippet)
    ;;  ("C-c y s" . yas-insert-snippet)
    ;;  ("C-c y v" . yas-visit-snippet-file))
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets)

  (use-package ivy-yasnippet
    :bind (("M-s y" . ivy-yasnippet)))
#+end_src
** COMMENT rg
#+begin_src emacs-lisp
  (use-package rg)
#+end_src
  
** COMMENT provide
#+begin_src emacs-lisp
  (provide 'init-tools)
#+end_src

* init-program
** markdown
  #+begin_src emacs-lisp
    (use-package markdown-mode
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)))

    (use-package toc-org
      :hook ((org-mode markdown-mode) . toc-org-mode))
  #+end_src
** TeX
中文导出的配置抄的 [[https://github.com/zhcosin/dotemacs/blob/master/lisp/init-orgmode.el][这里]]
#+begin_src emacs-lisp
  (use-package auctex
    :if *is-windows*)

  (use-package cdlatex
    :if *is-windows*)

  (setq-default TeX-engine 'xetex)

  (require 'ox-latex)
  (setq org-export-with-sub-superscripts nil)
  (add-to-list 'org-latex-classes
               '("ctexart"
                 "\\documentclass[UTF8,a4paper]{ctexart}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (setq org-latex-default-class "ctexart")
  (setq org-latex-compiler "xelatex")
#+end_src

** cc-mode
#+begin_src emacs-lisp
  (use-package google-c-style
    :hook ((c-mode-common . google-set-c-style)
           (c-mode-common . google-make-newline-indent)))
#+end_src

** Lisp
*** sly
#+begin_src emacs-lisp
  (use-package sly
    :init
    (setq inferior-lisp-program "sbcl")
    :hook (lisp-mode . sly))
#+end_src
*** racket
#+begin_src emacs-lisp
  (use-package racket-mode
    :hook ((racket-mode . racket-xp-mode)))
#+end_src
*** COMMENT slime
#+begin_src emacs-lisp
  (use-package slime
    :init
    (setq inferior-lisp-program "~/.roswell/impls/x86-64/windows/sbcl-bin/2.2.3/bin/sbcl.exe"
          slime-complete-symbol-function 'slime-fuzzy-complete-symbol
          slime-description-autofocus t
          slime-contribs '(slime-fancy slime-repl))
    (add-hook 'slime-repl-mode-hook #'(lambda () (define-key slime-repl-mode-map [(backspace)] #'paredit-backward-delete)
  )))
#+end_src

** COMMENT haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

** python
#+begin_src emacs-lisp
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")
#+end_src

** COMMENT elpy
#+begin_src emacs-lisp
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt")

  (use-package elpy
    :init
    (elpy-enable))

  (add-hook 'elpy-mode-hook (lambda ()
                            (add-hook 'before-save-hook
                                      'elpy-yapf-fix-code nil t)))
#+end_src
** COMMENT web
#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.html\\'" . web-mode))

  (use-package js2-mode
    :mode ("\\.js\\'" . js2-mode))
#+end_src

** COMMENT provide
#+begin_src emacs-lisp
  (provide 'init-program)
#+end_src
* init-evil
** evil
#+begin_src emacs-lisp
 (use-package evil
    :hook ((prog-mode text-mode)  . evil-local-mode)
    :init
    (setq evil-undo-system 'undo-tree
          evil-emacs-state-cursor 'bar
          ;; evil-move-beyond-eol t
          evil-disable-insert-state-bindings t)
    (add-hook 'evil-normal-state-entry-hook (lambda () (save-some-buffers t)))
    :config
    (evil-declare-key 'normal org-mode-map
      (kbd "TAB") 'org-cycle))
#+end_src

** general
https://github.com/noctuid/general.el
#+begin_src emacs-lisp
  (use-package general)
  (general-evil-setup)

  (general-imap "j"
    (general-key-dispatch 'self-insert-command
      :timeout 0.25
      "k" 'evil-normal-state))

  (general-define-key 
   :prefix "SPC"
   :states '(normal visual)
   "s" 'avy-goto-char-2
   "t" 'org-babel-tangle
   "a" 'org-agenda
   "b" 'evil-prev-buffer
   "f" 'evil-next-buffer)

  (general-define-key 
   :prefix ";"
   :states '(normal visual)
   ";" 'avy-goto-char-2)
#+end_src
** COMMENT evil-escape

#+begin_src emacs-lisp
  (use-package evil-escape
    :hook (after-init . evil-escape-mode)
    ;; :after (evil)
    :config
    (setq-default evil-escape-delay 0.3)
    (setq-default evil-escape-key-sequence "jk")
    (setq evil-escape-excluded-major-modes '(help-mode)))
#+end_src

* init-ui
** UI
[[https://www.bilibili.com/read/cv13719366][自动保存]]
#+begin_src emacs-lisp
  (setq default-directory "~/")
  (setq delete-by-moving-to-trash t)
  (setq ring-bell-function 'ignore)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  ;; (setq make-backup-files nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-.") 'imenu)

  ;; (fset 'yes-or-no-p 'y-or-n-p)
  (define-key y-or-n-p-map [return] 'act)
  (setq use-short-answers t)

  (add-function :after after-focus-change-function
                (lambda () (save-some-buffers t)))

  ;; (save-place-mode 1)

  (use-package delsel
    :ensure nil
    :hook (after-init . delete-selection-mode))
#+end_src
** TUI
#+begin_src emacs-lisp
  (setq inhibit-splash-screen 1)
  (setq initial-scratch-message ";; Never gonna give you up ~\n\n")

  (setq show-paren-delay 0
        show-paren-when-point-inside-paren t
        show-paren-when-point-in-periphery t)
  (show-paren-mode 1)

  (global-display-line-numbers-mode)
  (winner-mode 1)
  (column-number-mode 1)

  (setq-default tab-width 4
                indent-tabs-mode nil)
#+end_src
** GUI
真的不知道该怎么设置……  为了让 daemon 模式下字体设置也生效，就简单粗暴地直接设定 default-frame-alist 了。由于 Linux 目前上用的是 emacs-nox，所以只让这个设定在 windows 上生效。
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :if *is-windows*
    :config
    (setq-default cursor-type 'bar)
    (scroll-bar-mode -1)
    (tool-bar-mode 0)
    (set-fontset-font "fontset-default" 'han "霞鹜文楷")
    (setq default-frame-alist '((width . 90)
                                (height . 28)
                                (font . "JetBrains Mono-16")
                                )))
  (use-package emacs
    :ensure nil
    :if *is-linux*
    :config
    (menu-bar-mode -1))
#+end_src
** theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :if *is-linux*
    :defer nil
    :config (load-theme 'doom-city-lights t))
#+end_src
** COMMENT doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-icon nil)
    (setq doom-modeline-bar-width -1))
#+end_src

** COMMENT provide
#+begin_src emacs-lisp
  (provide 'init-ui)
#+end_src
* COMMENT init-eglot
#+begin_src emacs-lisp
  (use-package eglot
    :bind (:map eglot-mode-map
                ("C-c f" . eglot-format)
                ("C-c r" . eglot-rename)))
  (add-hook 'eglot-managed-mode-hook (lambda () (add-hook 'before-save-hook 'eglot-format nil t)))
  (add-hook 'c-mode-common-hook 'eglot-ensure)
  ;;(add-hook 'c-mode-common-hook (lambda () (add-hook 'before-save-hook 'eglot-format nil t)))

#+end_src
* init-lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((c-mode-common . lsp)
           (lsp-mode . lsp-enable-which-key-integration)))

  (defun lsp-format-before-save ()
    (add-hook 'before-save-hook #'lsp-format-buffer 0 t))

  (add-hook 'lsp-mode-hook #'lsp-format-before-save)
#+end_src
* COMMENT runemacs.bat
** 方案1
最开始的方案是在bat文件里指定HOME目录
%~dp0: %0代表脚本自身，~dp表示变量扩充，d是扩充到分区，p是扩充到路径。%~dp0合起来就代表当前目录的路径。
set HOME=%~dp0
  #+begin_src
set HOME=C:\Users\<username>
"C:\portable\emacs-27.2-x86_64\bin\runemacs.exe"
  #+end_src
** 方案2
后来切换到守护进程(daemon)方式来运行emacs，于是设置了HOME变量并整了个ahk脚本
(此时也切换到了gccemacs，windows版本在这里下载 https://github.com/kiennq/emacs-build)
#+begin_src
#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; #Warn  ; Enable warnings to assist with detecting common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

run C:\portable\emacs-master-x86_64-full\bin\runemacs.exe --daemon, ,Hide
#+end_src

在守护进程运行之后，将emacsclientw.exe右键发送到桌面快捷方式，之后在 属性-目标 中加上 -c 即可
** 方案3
https://emacstalk.github.io/post/020/
用这样一组参数
emacsclient -a "" -c -n "$@"
不过直接用在windows上好像有问题，把最后的 "$@" 去掉，然后创建一个快捷方式即可正常使用

这个 alias 在 linux 终端使用
alias e="emacsclient -c -a \"\""

